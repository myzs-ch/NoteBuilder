# 1 python3历史
python3默认字符编码：	UTF-8，所有字符都是unicode字符串


# 2 底层相关
{{python变量不需要声明}}
是否大小写敏感：	是
标识符规范：	由字母、数字和下划线组成，第一个字符必须是字母或者下划线_
保留字/关键字(记录模块)：	```\nimport keyword\nkeyword.kwlist\n```\n['False','None',"True','and','as','assert','break','class','continue','def','del','elif','else','except','finally','for','from','global','if','import','in','is','lambda','nonlocal','not','or','pass','raise','return','try','while','with','yield']
注释（3）：	```\n# xxx\n'''\nxxx\n'''\n"""\nxxx\n"""\n\n```\n
代码块表示：	python使用缩进来表示代码块，同一个代码块的语句必须包含相同的缩进空格数，否则抛出IndentationError错误
物理行与逻辑行：	物理行即文本上以回车结尾的一行代码。逻辑行指一条python解释器需要执行的指令，[]{}()内的代码在一个逻辑行里（指令，变量完整），一个物理航内使用多条语句，语句间使用分号隔离
同时为多个变量赋值：	a=b=c=1;  x,y,z=1,2,3
- 3/2（python除法）：		python除法得到的是浮点数
Python布尔类型的值：	python3中True和False的值为1 和0 ，可以和数字相加
布尔操作符的优先级：	not > and > or
python变量有类型吗：	没有，变量可以随意赋值，一般说的类型指变量指向的内存中的对象的类型

# 3 基本语法
{{**python中只有模块，类，函数才会引入新的作用域，其他代码块（如 if/elif/else/、try/except、for/while等）不会**}}

## 3.1 python作用域
del：	删除单个或者多个对象，也可以删除变量或者容器元素


## 3.1 关键字
# 4 基本数据类型
Python支持哪些数字类型：	int、float、bool、complex
python的复数定义：	1+2j 或者 complex(a,b)，实部和虚部都是浮点型
{{复数类型不能强制转换为其他类型}}
不可变类型：	不可变：tuple、str
数字以外能使用+、*的类型有：	list，str，tuple\n+：连接符\n*：后跟数字表示重复次数
有索引值的：	tuple，list，str
索引:		索引绝对值左小右大，左数从0起，右数从-1起
切片：		左闭右开，[b,e,s]\nb默认为0,e默认-1，s默认1\n步长可以为负值，当b>e时，s默认为-1

## 4.1 数字（Number）
{{python字符串有和列表类似的索引}}
python字符串的定义：	单双引号、三引号
取消转义：	python使用'\'转义特殊字符，在字符串前面添加一个"r"，可以让转义字符按字面显示
python字符串能否改变：	不能，通过索引去改变字符串的元素会报错


## 4.2 字符串（String）
{{列表可以完成大多数集合类的数据结构实现}}
列表中的元素类型能否不同：	可以，任何类型都能作为列表的元素



## 4.3 列表（List）
{{元组不能修改}}
元组定义：	定义在小括号里，如果只有一个或0个值，需要加上逗号



## 4.4 元组（Tuple）
集合的定义：	定义在{}里，创建空集合必须用set()，避免与字典混淆



## 4.5 集合（Set）
## 4.6 字典（Dict）
# 5 条件
# 6 循环
# 7 函数-语法
# 8 模块-语法
# 9 迭代器与生成器
# 10 错误和异常
IndentationError：	缩进不一致


## 10.3 常见异常和错误 
print：		
isinstance(object,classinfo)：	如果对象的类型与参数二的类型相同则返回True，classinfo可以是直接或间接类名、基本类型或者由它们组成的元组。会考虑继承关系，认为子类是一种父类类型。
type()：	返回传入参数的类型


# 11 函数-常用
{{大部分数据转换使用类名强制转换}}
repr(object):	返回对象的string格式\n

## 11.1 数据类型转换

# 12 函数-汇总
# 13 模块-专业
3>2==1	False\n(3>2)==1		True:	x<y<z 等价于 x<y and y<z\npython3表面上能实现逻辑表达式的连写，但在底层依然是将表达式链两两拆分，并用and连接；而不是从左到右依次运算
__repr__和__str__的区别：	都是用于显示，__str__是面向用户的，__repr__面向程序员。\n打印操作会首先尝试__str__和str内置函数（print运行的内部等价形式），通常应该返回一个友好的显示\n__repr__用于所有其他的环境中：用于


# 14 疑问
