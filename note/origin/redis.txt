（开源、c语言编写）
特点:	基于内存且支持持久化
数据库类型：	k-v
数据类型：	字符串strings，散列hashes，列表lists，集合sets，有序集合sorted sets，等
其他数据库：	mysql 关系型数据库，表格，基于磁盘，慢\nMongoDB 键值对文档型数据库，值为类似JSON文档，数据结构相对单一
redis诞生为了解决什么问题：	解决硬盘IO带来的性能瓶颈
应用场景：	缓存，并发计数，排行榜，生产者消费者模型

## 1 介绍
redis默认端口号：	6379
ubuntu中配置文件路径(mysql)：	```\nredis:/etc/redis/redis.conf \nmysql:/etc/mysql/mysql.conf.d/mysqld.cnf\n```\n
（配置文件设置）
> 设置密码：	配置文件下第500行：`requirepass 密码`
> 设置允许远程连接数据库：		69行，注释掉本地IP地址绑定，`bind 127.0.0.1 ::1`\n88行，关闭保护模式（yes改为no） `protected-mode no`
配置文件执行后重启redis才能生效：	`sudo /etc/init.d/redis-server restart`

## 2 配置
切换库：	`select number`\nnumber值在0~15之间，db0~db15
查看键：	`keys 表达式`
键是否存在：	`exists key`
删除键：	`del key`
键重命名：	`rename key newkey`
(一般公司都会禁掉下两条命令)
清除当前库中所有数据：	`flushdb`
清除所有库中所有数据：	`flushall`

## 3 基础命令


## 4 数据类型
存储特点：	字符串和数字都会转为字符串来存储，并且以二进制的方式存储在内存中
设置key-value（3）:		`set key value`：为key赋值，不存在则创建key\n`set key value nx`：当key不存在时创建key，key已经存在则返回（nil），nx（not exists）\n`mset key1 value1 [nx/(ex seconds)] key2 value2...`：同时设置多个k-v
获取key的值（2）：		`get key`\n`mget key1 key2...`
为键设置过期时间(2)：		`set key value ex seconds`：创建时设置\n```\nset key value\nexpire key second\npexpire key second\n```\n：为已有kv设置
获取长度：	`strlen key`：返回值为（integer）num，将value视为字符串，返回字符串长度
获取指定范围切片内容：	`getrange key start stop` 闭区间，start<=stop,否则为空，stop可以大于strlen key，stop不能省略
从某处开始替换内容：	`setrange key index value`：从索引值开始
整数加减：	`incrby key num` :将key的值增加num\n`incr key` :默认将key值加1\n`decrby key num`:将key值减少num\n`decr key`：默认将key值减1\nnum可以为负数
浮点数加减：	`incrbyfloat key num`:将浮点型的key增加num
查看key存活时间：	`ttl key`
删除过期：	`persist key`
string 命名：	可以使用‘-’，‘：’,key值不宜过长，会消耗内存，且增加在数据中查找的计算成本高;不宜过短，可读性差
string的值的大小范围： 	最多能存储512M


### 4.1 字符串


### 4.2 列表
列表的元素是什么类型：	字符串
元素是否可重复：	可
最大容量：	2^32-1
列表与什么数据结构类似：		队列



## 5 其他
1.主动出击：	所有带过期时间属性的key放在一个字典中\n（1）在该字典中随机选择20个key\n（2）检测并删除过期key\n（3）如果过期的key的比例超过1/4，重复（1）-（3）\n默认超时25ms(redis每隔100ms主动扫描一次)，则暂时停止，优先为用户提供服务（避免因为扫描而卡死）
主动出击中，每隔多少秒扫描过期字典： 	100ms
最多有多少时间用于扫描删除：	25ms
2.惰性删除：	get根据键获取某个值时，该值过期，则删除
3.暴力淘汰：	set检查内存使用超过maxmemory就开启
暴力淘汰的三种原则：	noeviction：收到set命令，拒绝写服务，只提供读服务\nnvolatile-lru:尝试删除带国旗时间的key，使用最少使用原则。\nallkeys-lru:针对所有键按最少使用原则删除
如何判断低使用频率：	设置一个数组存储数据，新set或者使用到的数据放最上面，一段时间后，最下面的数据定为使用频率最低的

### 5.1 redis的删除规则
